plugins {
	id "pmd"
	id "idea"
	id "maven-publish"
	id "net.neoforged.licenser" version "0.7.2"
	id "com.diffplug.spotless" version "6.25.0"
	// Required for NeoGradle
	id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

group = maven_group_id
def javaVersion = 17
def ENV = System.getenv()
def NOW = new Date()
def buildTime = ENV.BUILD_TIME ?: NOW.format("yyyyMMddHHmmss")
boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ("${ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime}") : ""
version = (ENV.TAG ?: "${libs.versions.minecraft.get()}-development") + ((isPreviewBuild && !ENV.TAG) ? "+${buildNumber}" : "")
def mod_name = rootProject.name.replaceAll("-", "_").toLowerCase(Locale.ROOT)
println("Building ${project.name} ${version}")

subprojects {
	apply plugin: "pmd"
	apply plugin: "java"
	apply plugin: "net.neoforged.licenser"
	apply plugin: "com.diffplug.spotless"
	project.group = rootProject.group
	project.version = rootProject.version

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(javaVersion)
			vendor = JvmVendorSpec.MICROSOFT
		}
		withSourcesJar()
		withJavadocJar()
	}

	javadoc {
		options.tags = ["reason"]
	}

	base {
		archivesName = "${rootProject.name}-${project.name}"
	}

	jar {
		from(rootProject.file("LICENSE.md")) {
			rename {
				"LICENSE_${mod_name}.md"
			}
		}
		manifest {
            attributes([
                "Maven-Artifact"            : "${maven_group_id}:${rootProject.name}-${project.name}:${project.version}",
                "Timestamp"                 : NOW.format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Specification-Title"       : rootProject.name,
                "Specification-Vendor"      : "KiriCattus",
                "Specification-Version"     : project.version,
                "Implementation-Title"      : "${rootProject.name}-${project.name}",
                "Implementation-Version"    : project.version,
                "Implementation-Vendor"     : "KiriCattus",
                "Implementation-Timestamp"  : NOW.format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java"             : "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})",
                "Built-On-Minecraft"        : libs.versions.minecraft.get()
            ])
        }
    }

	sourcesJar {
		from(rootProject.file("LICENSE.md")) {
			rename {
				"LICENSE_${mod_name}.md"
			}
		}
	}

	repositories {
		mavenCentral()

		maven {
			name = "Sponge"
			url = "https://repo.spongepowered.org/repository/maven-public/"
			content {
				includeGroup "org.spongepowered"
			}
		}

		maven {
			name = "Quilt"
			url = "https://maven.quiltmc.org/repository/release/"
		}

		maven {
			name = "Fabric"
			url = "https://maven.fabricmc.net/"
		}

		maven {
			name = "NeoForged"
			url = "https://maven.neoforged.net/releases/"
		}

		maven {
			name = "MinecraftForge"
			url = "https://maven.minecraftforge.net/"
		}

		maven {
			name = "uuid.gg Maven Repository"
			url = "https://maven.uuid.gg/releases/"
		}

		maven {
			name "TerraformersMC"
			url "https://maven.terraformersmc.com/releases/"
		}

		maven {
			name = "Modrinth"
			url = "https://api.modrinth.com/maven/"
			content {
				includeGroup "maven.modrinth"
			}
		}

		maven {
			name = "CurseMaven"
			url = "https://www.cursemaven.com/"
			content {
				includeGroup "curse.maven"
			}
		}
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
		it.options.release.set(javaVersion)
	}

	processResources {
		filteringCharset "UTF-8"

		def expandProps = [
			"version"                       : version,
			"maven_group_id"                : maven_group_id,
			"mod_id"                        : mod_id,
			"mod_display_name"              : mod_display_name,
			"mod_description"               : mod_description,
			"sources_url"                   : sources_url,
			"issues_url"                    : issues_url,
			"license_url"					: license_url,
			"discord_url"                   : discord_url,
			"curseforge_url"                : curseforge_url,
			"modrinth_url"                  : modrinth_url,
			"homepage_url"                  : homepage_url,
			"minecraft_version"             : libs.versions.minecraft.get(),
			"neoforge_version"              : neoforge.versions.neoforge.get(),
			"fabric_loader_version"         : fabric.versions.fabric.loader.get(),
			"quilt_loader_version"          : quilt.versions.quilt.loader.get()
		]

		filesMatching(["fabric.mod.json", "quilt.mod.json", "META-INF/mods.toml", "*.mixins.json"]) {
			expand expandProps
		}
		inputs.properties(expandProps)
	}

    license {
        ignoreFailures = true
        header = rootProject.file("LICENSE_HEADER.txt")
        newLine = false
        include "**/*.java"
        include "**/*.kt"
        exclude "**/package-info.java"
        exclude "**/module-info.java"
        properties {
            name = "KiriCattus"
            year = "2013 - " + Calendar.getInstance().get(Calendar.YEAR)
            license_link = license_url
            project_information = license_description
        }
    }

    spotless {
        java {
            endWithNewline()
            indentWithSpaces()
            removeUnusedImports()
            toggleOffOn()
            importOrder()

            // Courtesy of diffplug/spotless#240
            // https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
            custom "noWildcardImports", { String fileContents ->
                if (fileContents.contains("*;\n")) {
                    throw new GradleException("No wildcard imports are allowed!")
                }
            }

            custom "noNotNull", { String fileContents ->
                if (fileContents.contains("@NotNull") || fileContents.contains("@Nonnull")) {
                    throw new GradleException("@NotNull and @Nonnull are disallowed.")
                }
            }
            bumpThisNumberIfACustomStepChanges(1)
        }
    }

    pmd {
        ignoreFailures = true
        reportsDir = project.file("reports/")
        rulesMinimumPriority = 5
        toolVersion = "6.55.0"
    }

    tasks.named("spotlessApply").configure{mustRunAfter "licenseFormat"}
    tasks.named("pmdMain").configure{mustRunAfter "spotlessApply"}

    tasks.register("cleanCode", Task) {
        dependsOn "licenseFormat", "spotlessApply", "pmdMain"
    }

    tasks.named("assemble").configure{dependsOn "cleanCode"}

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    publishing {
        publications {
            "mavenJava${project.name}"(MavenPublication) {
                artifactId "${rootProject.name}-${project.name}"
                from components.java
            }
        }
    }
}

publishing {
	repositories {
		if (ENV.MAVEN_UPLOAD_URL) {
			maven {
				url = ENV.MAVEN_UPLOAD_URL
				credentials {
					username = ENV.MAVEN_UPLOAD_USERNAME
					password = ENV.MAVEN_UPLOAD_PASSWORD
				}
			}
		}
	}
}
