plugins {
	alias neoforge.plugins.neogradle
}

dependencies {
	implementation "${neoforge.neoforge.get()}"
	implementation project(path: ":common")
	compileOnly project(":common")

	implementation neoforge.terrablender
	implementation neoforge.jade
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file("src/main/resources/META-INF/accesstransformer.cfg").exists()) {
	accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
}

runs {
	configureEach {
		systemProperty "forge.logging.markers", "REGISTRIES"
		systemProperty "forge.logging.console.level", "debug"
		modSource project.sourceSets.main
		modSource project(":common").sourceSets.main
	}

	client {
		workingDirectory project.file("run")

		if (project.hasProperty("mc_uuid")) {
			programArgument "--uuid=${project.mc_uuid}"
		}

		if (project.hasProperty("mc_username")) {
			programArgument "--username=${project.mc_username}"
		}

		if (rootProject.hasProperty("mc_java_agent_path")) {
			programArgument "-javaagent:${rootProject.mc_java_agent_path}"
		}
	}

	server {
		workingDirectory project.file("run/server")
		programArgument "--nogui"
	}

	data {
		workingDirectory project.file("run/data")
		programArguments.addAll(
			"--mod", mod_id, "--all",
			"--output", file("../common/src/generated/resources/").getAbsolutePath(),
			"--existing", file("../common/src/main/resources/").getAbsolutePath()
		)
	}
}

sourceSets.main.resources.srcDir("../common/src/generated/resources")

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
	source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
	source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
	from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
	from project(":common").sourceSets.main.resources
}

publishing {
	publications {
		"mavenJava${project.name}"(MavenPublication) {
			jarJar.component(it)
		}
	}
}
