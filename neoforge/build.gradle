plugins {
    id "multiloader-loader"
    id "net.neoforged.moddev"
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(":common").file("src/main/resources/META-INF/accesstransformer.cfg")
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = project.parchment_minecraft
        mappingsVersion = project.parchment_version
    }
    runs {
        configureEach {
            systemProperty("neoforge.enabledGameTestNamespaces", project.mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()

            if (project.hasProperty("mc_uuid")) {
                programArguments.addAll "--uuid", project.mc_uuid
            }

            if (project.hasProperty("mc_username")) {
                programArguments.addAll "--username", project.mc_username
            }
        }
        data {
            data()
            programArguments.addAll("--mod", project.mod_id, "--all", "--output", file("../common/src/generated/resources").absolutePath, "--existing", file("../common/src/main/resources").absolutePath)
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    implementation "maven.modrinth:jade:${project.jade_neoforge_version}"
    implementation "com.github.glitchfiend:TerraBlender-neoforge:${minecraft_version}-${terrablender_neoforge_version}"
}

sourceSets.main.resources { srcDir "src/generated/resources" }
