plugins {
	alias fabric.plugins.fabric.loom
}

dependencies {
	minecraft libs.minecraft
	mappings loom.officialMojangMappings()

	modImplementation fabric.fabric.loader
	modImplementation fabric.fabric.api

	compileOnly project(":common")

	modImplementation fabric.terrablender
	modImplementation fabric.jade
	modImplementation fabric.modmenu
}

loom {
	mods {
		"${mod_id}" {
			sourceSet("main")
			project(":common").sourceSets.main
		}
	}

	if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
		accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
	}

	runs {
		client {
			client()
			setConfigName("Fabric Client")
			ideConfigGenerated(true)
			runDir("run")

			if (project.hasProperty('mc_uuid')) {
				programArg("--uuid=${project.mc_uuid}")
			}

			if (project.hasProperty('mc_username')) {
				programArg("--username=${project.mc_username}")
			}

			if (rootProject.hasProperty('mc_java_agent_path')) {
				vmArg("-javaagent:${rootProject.mc_java_agent_path}")
			}
		}

		server {
			server()
			setConfigName("Fabric Server")
			ideConfigGenerated(true)
			programArg("--nogui")
			runDir("run/server")
		}

		datagen {
			inherit server
			setConfigName("Fabric Data Gen")
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("${project.rootDir}/common/src/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${mod_id}"

			runDir "run/datagen"
		}
	}
}

sourceSets.main.resources.srcDir('../common/src/generated/resources')

tasks.withType(JavaCompile).configureEach {
	source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
	source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
	from(project(":common").sourceSets.main.allSource)
}

processResources {
	from project(":common").sourceSets.main.resources
}

//We data generate our resources into the projects root directory so we have to
//add them to the sub-project here to be loaded when the game runs.
sourceSets {
	main {
		resources {
			srcDirs += [
				"${project.rootDir}/common/src/generated"
			]
		}
	}
}
